main:
  push:
    - services:
        - docker
      imports:
        - https://cnb.cool/xiyingruyi/Secrets/-/blob/main/env.yml
      stages:
        - name: Git Push to GitHub
          image: ubuntu:latest  # 使用通用镜像
          environment:
            - GIT_ACCESS_TOKEN
            - GIT_USERNAME
          script: |
            echo "Pipeline 开始执行，采用原生 Git 推送..."
            
            # 1. 密钥检查
            if [ -z "$GIT_ACCESS_TOKEN" ]; then echo "错误: GIT_ACCESS_TOKEN 未设置！"; exit 1; fi
            if [ -z "$GIT_USERNAME" ]; then GIT_USERNAME="xiyingruyi"; fi
            
            # 2. 安装 Git 和所需工具
            apt update
            apt install -y git
            
            # 3. 配置 Git 用户信息
            git config --global user.email "ci-bot@cnb.cool"
            git config --global user.name "$GIT_USERNAME"
            
            # 4. 动态获取当前分支
            CURRENT_BRANCH=$(git branch --show-current)
            echo "当前分支: $CURRENT_BRANCH"

            # 5. 避免无限循环的逻辑 (必须)
            # a. 配置远程仓库URL (使用 token 认证)
            REMOTE_URL="https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@github.com/xiyingruyi/Stash-rules.git"
            
            # b. 添加 GitHub 为新远程，并拉取信息
            git remote add github $REMOTE_URL
            git fetch github --no-tags
            
            # c. 检查当前分支是否领先于 GitHub 上的同名分支
            COMMITS_AHEAD=$(git rev-list --count github/$CURRENT_BRANCH..$CURRENT_BRANCH 2>/dev/null || echo 0)
            if [ $COMMITS_AHEAD -eq 0 ]; then 
                echo "无变更需要同步（本地仓库已一致）。"; 
                exit 0; 
            fi
            echo "领先 $COMMITS_AHEAD commits，正在同步到 GitHub..."

            # 6. 执行 Git 推送：一次性推送所有需要同步的分支
            # 推送当前分支到 GitHub 的同名分支
            # 如果需要同时推送到 'jsDelivr' 分支，取消下一行的注释：
            # git push github $CURRENT_BRANCH jsDelivr
            
            # 如果只需要推送当前分支：
            git push github $CURRENT_BRANCH

            if [ $? -eq 0 ]; then
                echo "Git 推送成功！"
            else
                echo "Git 推送失败！"
                exit 1
            fi
          timeout: 10m
