push:
  - branches:
      - main
      - jsDelivr
      # 如果您还有其他需要同步的分支，请在这里添加，例如：
      # - dev
    services:
      - docker
    imports:
      - https://cnb.cool/xiyingruyi/Secrets/-/blob/main/env.yml  # 密钥仓库
    stages:
      - name: Git Push to GitHub
        image: ubuntu:latest
        environment:
          - GIT_ACCESS_TOKEN
          - GIT_USERNAME
        script: |
          echo "Pipeline 开始执行（分支: $CURRENT_BRANCH）..."
          
          # 1. 密钥检查
          if [ -z "$GIT_ACCESS_TOKEN" ]; then 
            echo "错误: GIT_ACCESS_TOKEN 未设置！"; 
            exit 1; 
          fi
          if [ -z "$GIT_USERNAME" ]; then GIT_USERNAME="xiyingruyi"; fi
          echo "密钥检查通过。"
          
          # 2. 安装 Git
          apt update && apt install -y git
          
          # 3. 配置 Git 用户
          git config --global user.email "ci-bot@cnb.cool"
          git config --global user.name "$GIT_USERNAME"
          
          # 4. 当前分支
          # 注意：在 CNB 环境中，需要确保 $CURRENT_BRANCH 变量已被正确设置或手动获取
          CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo "未检测到分支")
          if [ "$CURRENT_BRANCH" = "未检测到分支" ]; then
             echo "错误: 无法获取当前分支名。";
             exit 1;
          fi
          echo "当前分支: $CURRENT_BRANCH"

          # 5. 远程 + fetch
          REMOTE_URL="https://github.com/xiyingruyi/Stash-rules.git"
          git remote add github $REMOTE_URL || git remote set-url github $REMOTE_URL
          git fetch github --no-tags
          
          # 6. 时间戳比较 (保留原逻辑，可能导致跳过)
          CNB_TIME=$(git log -1 --format=%ct $CURRENT_BRANCH)
          GITHUB_TIME=$(git log -1 --format=%ct github/$CURRENT_BRANCH 2>/dev/null || echo 0)

          echo "CNB last commit time: $CNB_TIME"
          echo "GitHub last commit time: $GITHUB_TIME"

          # 如果 CNB 不新，skip
          if [ $CNB_TIME -le $GITHUB_TIME ]; then
            echo "GitHub 更新或一致，跳过推送。"
            exit 0
          fi

          echo "CNB 新，推送 $((CNB_TIME - GITHUB_TIME)) 秒的变更到 GitHub..."

          # 7. 注入 token (保留原逻辑)
          git config --global url."https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@github.com/".insteadOf "https://github.com/"

          # 8. Fallback: 先 pull 整合
          echo "尝试 pull GitHub 变更..."
          if ! git pull github $CURRENT_BRANCH; then
            echo "Pull 失败，使用 force-with-lease 覆盖。"
          fi

          # 9. 构造推送目标 (增加 jsDelivr 分支逻辑)
          PUSH_REF="$CURRENT_BRANCH" # 默认只推送当前分支到同名目标分支
          
          # 如果当前更新的分支是 main，则同时推送到 main 和 jsDelivr
          if [ "$CURRENT_BRANCH" = "main" ]; then
              echo "检测到 main 分支更新，同时同步到 GitHub 的 main 和 jsDelivr 分支。"
              PUSH_REF="$CURRENT_BRANCH jsDelivr"
          fi

          # 10. 推送
          git push github $PUSH_REF --force-with-lease

          if [ $? -eq 0 ]; then
            echo "推送成功！同步目标: $PUSH_REF"
          else
            echo "推送失败！"
            exit 1
          fi
          
          # 11. 清理
          git config --global --unset url."https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@github.com/".insteadOf
        timeout: 10m