name: Daily Proxy Update

on:
  schedule:
    - cron: '0 0 * * *'
    - cron: '0 12 * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install pyyaml

    - name: Fetch subscription links
      id: fetch
      run: |
        # 安装 Node.js
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt-get install -y nodejs
        
        # 安装 Puppeteer + 反检测插件
        npm install puppeteer puppeteer-extra puppeteer-extra-plugin-stealth
        
        # 增强Puppeteer脚本：加重试、更多模拟、内容校验
        node -e "
        const puppeteer = require('puppeteer-extra');
        const StealthPlugin = require('puppeteer-extra-plugin-stealth');
        puppeteer.use(StealthPlugin());
        const fs = require('fs');
        const https = require('https');
        const MAX_RETRIES = 3;
        
        async function fetchWithRetry(retryCount = 0) {
          const browser = await puppeteer.launch({ 
            headless: true, 
            args: [
              '--no-sandbox', 
              '--disable-setuid-sandbox', 
              '--disable-dev-shm-usage', 
              '--disable-blink-features=AutomationControlled',
              '--disable-web-security',
              '--viewport-width=1920',
              '--viewport-height=1080'
            ]
          });
          const page = await browser.newPage();
          
          // 增强UA和anti-detection
          await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
          await page.setExtraHTTPHeaders({
            'Accept-Language': 'en-US,en;q=0.9,zh-CN;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br'
          });
          await page.evaluateOnNewDocument(() => {
            Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
            Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });
            Object.defineProperty(navigator, 'languages', { get: () => ['en-US', 'en'] });
            window.chrome = { runtime: {} };
            const originalQuery = window.navigator.permissions.query;
            window.navigator.permissions.query = (parameters) => (
              parameters.name === 'notifications' ?
                Promise.resolve({ state: Notification.permission }) :
                originalQuery(parameters)
            );
          });
          
          console.log('Accessing initial page to set cookies...');
          await page.goto('https://www.bsbb.cc/sub/index.php', { 
            waitUntil: 'networkidle0',  // 等网络空闲，更稳
            timeout: 30000 
          });
          
          // 模拟人类行为：随机滚动和鼠标移动
          await page.evaluate(async () => {
            await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));  // 随机等待
            window.scrollTo(0, Math.random() * 500);  // 随机滚动
            // 模拟鼠标移动（简化）
            document.dispatchEvent(new MouseEvent('mousemove', { clientX: Math.random() * 1920, clientY: Math.random() * 1080 }));
          });
          
          console.log('Waiting 12-15 seconds for redirect...');
          await new Promise(resolve => setTimeout(resolve, 12000 + Math.random() * 3000));
          
          const finalUrl = page.url();
          console.log('Final URL after wait:', finalUrl);
          
          if (!finalUrl.includes('/api/sub.php?t=') || finalUrl === 'https://www.bsbb.cc/sub/index.php') {
            await browser.close();
            if (retryCount < MAX_RETRIES) {
              console.log('Invalid redirect, retrying... (' + (retryCount + 1) + '/' + MAX_RETRIES + ')');
              return fetchWithRetry(retryCount + 1);
            }
            console.log('No valid redirect after retries. Workflow failed.');
            process.exit(1);
          }
          
          // 获取增强cookies（包括session/path）
          const cookies = await page.cookies();
          const cookieString = cookies.map(c => \`\${c.name}=\${c.value}\`).join('; ');
          console.log('Cookies set (' + cookies.length + ' cookies), fetching with cookies...');
          
          await browser.close();
          
          // 用 https 请求 API，增强headers
          return new Promise((resolve, reject) => {
            const req = https.request(finalUrl, {
              method: 'GET',
              headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Cookie': cookieString,
                'Referer': 'https://www.bsbb.cc/sub/index.php',
                'Accept': 'text/plain, */*; q=0.01',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive'
              }
            }, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                const trimmed = data.trim();
                fs.writeFileSync('raw-sub.txt', trimmed);
                const length = trimmed.length;
                console.log('Fetched length:', length);
                
                // 校验：非HTML、非短内容、非错误关键字
                if (length < 1000 || trimmed.includes('<!DOCTYPE') || trimmed.includes('<html') || 
                    trimmed.includes('访问受限') || trimmed.includes('Verify') || trimmed.includes('error')) {
                  console.log('Invalid content detected. Preview:', trimmed.substring(0, 200));
                  if (retryCount < MAX_RETRIES) {
                    console.log('Retrying...');
                    reject(new Error('Invalid content'));
                    return;
                  }
                  reject(new Error('Content invalid after retries'));
                } else {
                  // 快速base64校验
                  try {
                    const decoded = Buffer.from(trimmed, 'base64').toString('utf-8');
                    if (decoded.includes('proxies:') || decoded.includes('type: vless') || decoded.includes('type: trojan')) {
                      console.log('Valid YAML detected after decode. Preview:', decoded.substring(0, 100));
                      resolve();
                    } else {
                      throw new Error('No YAML structure');
                    }
                  } catch (e) {
                    console.log('Not base64 or invalid decode. Assuming plain text YAML? Preview:', trimmed.substring(0, 100));
                    if (trimmed.includes('proxies:')) resolve(); else throw new Error('Invalid format');
                  }
                }
              });
            });
            req.on('error', reject);
            req.setTimeout(10000, () => reject(new Error('Timeout')));
            req.end();
          });
        }
        
        fetchWithRetry().catch(err => { 
          console.error('Error after retries:', err.message);
          process.exit(1); 
        });
        "

    - name: Validate raw-sub.txt before decode
      run: |
        if grep -q '<html\|<!DOCTYPE\|error' raw-sub.txt; then
          echo "Error: raw-sub.txt contains HTML/error. Fetch failed."
          cat raw-sub.txt | head -200
          exit 1
        fi
        echo "raw-sub.txt validated OK (length: $(wc -c < raw-sub.txt) bytes)"

    # 其余步骤不变：Decode...、Convert...、Backup...、Commit...
    # （为简洁省略，但Commit步骤可加：如果all-proxies.yaml存在，用yq merge）
    # 示例：需先pip install yq，然后在Convert后：yq e '.proxies += load("nodes.yaml").proxies' all-proxies.yaml -i
